#!/usr/bin/env python3
"""
üîß CORRECTION M√âTICULEUSE COMPL√àTE
Corrige TOUS les probl√®mes identifi√©s dans video_processor.py
"""

import re
from pathlib import Path
import shutil

def correction_meticuleuse_complete():
    """Correction m√©ticuleuse de TOUS les probl√®mes identifi√©s"""
    print("üîß CORRECTION M√âTICULEUSE COMPL√àTE")
    print("=" * 50)
    
    # Sauvegarde du fichier original
    backup_path = "video_processor.py.backup_correction_complete"
    if not Path(backup_path).exists():
        shutil.copy2("video_processor.py", backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_path}")
    
    # Lire le fichier
    with open("video_processor.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    original_content = content
    corrections_made = []
    
    print("üîç Analyse des probl√®mes...")
    
    # 1. CORRECTION: Supprimer la red√©claration probl√©matique dans le bloc d'erreur
    print("\nüîß Correction 1: Suppression red√©claration dans bloc d'erreur...")
    
    # Pattern pour trouver le bloc probl√©matique
    pattern1 = r'(\s+)except Exception:\s+fetched_brolls = \[\]\s+print\("    ‚ö†Ô∏è Erreur lors de la pr√©paration des B-rolls fetch√©s"\)'
    replacement1 = r'\1except Exception:\n\1    print("    ‚ö†Ô∏è Erreur lors de la pr√©paration des B-rolls fetch√©s")'
    
    if re.search(pattern1, content):
        content = re.sub(pattern1, replacement1, content)
        corrections_made.append("Suppression red√©claration fetched_brolls dans bloc d'erreur")
        print("‚úÖ Correction 1 appliqu√©e")
    else:
        print("‚ö†Ô∏è Pattern 1 non trouv√©, v√©rification manuelle n√©cessaire")
    
    # 2. CORRECTION: V√©rifier que la premi√®re d√©claration est correcte
    print("\nüîß Correction 2: V√©rification premi√®re d√©claration...")
    
    # Pattern pour la premi√®re d√©claration (doit rester)
    pattern2 = r'# üö® CORRECTION CRITIQUE: Cr√©er fetched_brolls accessible globalement\s+fetched_brolls = \[\]'
    if re.search(pattern2, content):
        print("‚úÖ Premi√®re d√©claration correcte (doit rester)")
    else:
        print("‚ö†Ô∏è Premi√®re d√©claration non trouv√©e")
    
    # 3. CORRECTION: V√©rifier que la ligne comment√©e est bien comment√©e
    print("\nüîß Correction 3: V√©rification ligne comment√©e...")
    
    pattern3 = r'# fetched_brolls = \[\]  # ‚ùå SUPPRIM√â: Cette ligne √©crase la variable fetch√©e !'
    if re.search(pattern3, content):
        print("‚úÖ Ligne comment√©e correcte")
    else:
        print("‚ö†Ô∏è Ligne comment√©e non trouv√©e")
    
    # 4. CORRECTION: Optimiser la gestion des erreurs (r√©duire les exceptions g√©n√©riques)
    print("\nüîß Correction 4: Optimisation gestion des erreurs...")
    
    # Remplacer les exceptions g√©n√©riques par des exceptions sp√©cifiques
    generic_exceptions = [
        (r'except Exception:', 'except (OSError, IOError, ValueError, TypeError):'),
        (r'except Exception as e:', 'except (OSError, IOError, ValueError, TypeError) as e:'),
    ]
    
    for old_pattern, new_pattern in generic_exceptions:
        if re.search(old_pattern, content):
            content = re.sub(old_pattern, new_pattern, content)
            corrections_made.append(f"Remplacement exception g√©n√©rique: {old_pattern}")
    
    # 5. CORRECTION: Remplacer les 'pass' par des logs appropri√©s
    print("\nüîß Correction 5: Remplacement des 'pass'...")
    
    # Pattern pour trouver les 'pass' dans les blocs except
    pass_pattern = r'(\s+except.*:\s+)pass'
    pass_replacement = r'\1logger.warning(f"Exception ignor√©e dans {__name__}")'
    
    if re.search(pass_pattern, content):
        content = re.sub(pass_pattern, pass_replacement, content)
        corrections_made.append("Remplacement des 'pass' par des logs")
        print("‚úÖ Correction 5 appliqu√©e")
    
    # 6. CORRECTION: Optimiser la logique d'assignation
    print("\nüîß Correction 6: Optimisation logique d'assignation...")
    
    # V√©rifier que la logique d'assignation est correcte
    assignment_pattern = r'if items_without_assets and fetched_brolls:'
    if re.search(assignment_pattern, content):
        print("‚úÖ Logique d'assignation correcte")
    else:
        print("‚ö†Ô∏è Logique d'assignation non trouv√©e")
    
    # 7. CORRECTION: V√©rifier la configuration
    print("\nüîß Correction 7: V√©rification configuration...")
    
    # V√©rifier que la configuration est correcte
    config_patterns = [
        (r'max_broll_ratio=0\.40', "Configuration max_broll_ratio correcte"),
        (r'max_broll_insertions=6', "Configuration max_broll_insertions correcte"),
        (r'min_gap_between_broll_s=4\.0', "Configuration min_gap correcte"),
    ]
    
    for pattern, description in config_patterns:
        if re.search(pattern, content):
            print(f"‚úÖ {description}")
        else:
            print(f"‚ö†Ô∏è {description} - V√©rification n√©cessaire")
    
    # 8. CORRECTION: Nettoyer les variables non d√©finies
    print("\nüîß Correction 8: Nettoyage variables non d√©finies...")
    
    # V√©rifier l'utilisation de fetched_brolls
    usage_pattern = r'fetched_brolls'
    usage_count = len(re.findall(usage_pattern, content))
    print(f"üìä Utilisations de fetched_brolls: {usage_count}")
    
    # 9. CORRECTION: V√©rifier la coh√©rence des imports
    print("\nüîß Correction 9: V√©rification coh√©rence imports...")
    
    # V√©rifier les imports critiques
    critical_imports = [
        'from broll_selector import',
        'from timeline_legacy import',
        'from fetchers import',
        'from scoring import'
    ]
    
    for import_line in critical_imports:
        if import_line in content:
            print(f"‚úÖ Import trouv√©: {import_line}")
        else:
            print(f"‚ö†Ô∏è Import manquant: {import_line}")
    
    # 10. CORRECTION: V√©rifier la logique de fallback
    print("\nüîß Correction 10: V√©rification logique de fallback...")
    
    # V√©rifier que le fallback n'est activ√© que si n√©cessaire
    fallback_pattern = r'# üö® FALLBACK UNIQUEMENT SI VRAIMENT N√âCESSAIRE'
    if re.search(fallback_pattern, content):
        print("‚úÖ Logique de fallback correcte")
    else:
        print("‚ö†Ô∏è Logique de fallback non trouv√©e")
    
    # V√©rifier les modifications
    if content != original_content:
        print(f"\nüîß {len(corrections_made)} corrections appliqu√©es:")
        for correction in corrections_made:
            print(f"   ‚úÖ {correction}")
        
        # Sauvegarder le fichier corrig√©
        with open("video_processor.py", "w", encoding="utf-8") as f:
            f.write(content)
        
        print(f"\n‚úÖ Fichier corrig√© sauvegard√©")
        
        # Cr√©er un rapport de correction
        report_path = "RAPPORT_CORRECTION_METICULEUSE.md"
        with open(report_path, "w", encoding="utf-8") as f:
            f.write("# üîß RAPPORT DE CORRECTION M√âTICULEUSE COMPL√àTE\n\n")
            f.write(f"**Date:** {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            f.write("## ‚úÖ Corrections Appliqu√©es\n\n")
            for correction in corrections_made:
                f.write(f"- {correction}\n")
            f.write("\n## üìä R√©sum√©\n\n")
            f.write(f"- **Total corrections:** {len(corrections_made)}\n")
            f.write(f"- **Fichier sauvegard√©:** {backup_path}\n")
            f.write(f"- **Fichier corrig√©:** video_processor.py\n")
            f.write(f"- **Rapport:** {report_path}\n")
        
        print(f"üìã Rapport de correction cr√©√©: {report_path}")
        
        return True
    else:
        print("\n‚úÖ Aucune correction n√©cessaire - Fichier d√©j√† correct")
        return False

def verification_post_correction():
    """V√©rification apr√®s correction"""
    print("\nüîç V√âRIFICATION POST-CORRECTION")
    print("=" * 40)
    
    with open("video_processor.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    # V√©rifier que les red√©clarations ont √©t√© supprim√©es
    problematic_declarations = re.findall(r'fetched_brolls = \[\]', content)
    print(f"üìä D√©clarations fetched_brolls restantes: {len(problematic_declarations)}")
    
    if len(problematic_declarations) <= 1:
        print("‚úÖ Red√©clarations probl√©matiques supprim√©es")
    else:
        print("‚ö†Ô∏è Red√©clarations probl√©matiques encore pr√©sentes")
        for i, decl in enumerate(problematic_declarations):
            print(f"   {i+1}. {decl}")
    
    # V√©rifier la gestion des erreurs
    generic_exceptions = len(re.findall(r'except Exception:', content))
    print(f"üìä Exceptions g√©n√©riques restantes: {generic_exceptions}")
    
    if generic_exceptions < 50:
        print("‚úÖ Gestion des erreurs optimis√©e")
    else:
        print("‚ö†Ô∏è Trop d'exceptions g√©n√©riques restantes")
    
    # V√©rifier les 'pass'
    pass_count = len(re.findall(r'\s+pass\s*$', content, re.MULTILINE))
    print(f"üìä 'pass' restants: {pass_count}")
    
    if pass_count < 30:
        print("‚úÖ 'pass' optimis√©s")
    else:
        print("‚ö†Ô∏è Trop de 'pass' restants")
    
    print("\nüéØ V√©rification termin√©e")

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE CORRECTION M√âTICULEUSE COMPL√àTE")
    print("=" * 60)
    
    try:
        success = correction_meticuleuse_complete()
        if success:
            verification_post_correction()
            print("\nüéâ CORRECTION M√âTICULEUSE COMPL√àTE TERMIN√âE AVEC SUCC√àS!")
        else:
            print("\n‚úÖ Aucune correction n√©cessaire")
            
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la correction: {e}")
        import traceback
        traceback.print_exc() 