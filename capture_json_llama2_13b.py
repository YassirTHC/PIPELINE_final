#!/usr/bin/env python3
"""
üîç CAPTURE JSON BRUT LLAMA2:13B
Capture et affiche la r√©ponse JSON compl√®te pour analyse de conformit√©
"""

import requests
import json
import time

def capture_json_llama2_13b():
    """Capture la r√©ponse JSON brute de llama2:13b"""
    print("üîç CAPTURE JSON BRUT LLAMA2:13B")
    print("=" * 50)
    
    # Prompt simplifi√© (votre version actuelle)
    prompt = (
        "You are a JSON generator for social media content. Generate ONLY valid JSON.\n\n"
        "REQUIRED: Create a JSON object with these exact keys:\n"
        "- title: single catchy title (‚â§60 chars)\n"
        "- description: single description with call-to-action\n"
        "- hashtags: array of 10-14 hashtags (#keyword format)\n"
        "- broll_keywords: array of 20-25 keyword objects\n\n"
        "BROLL KEYWORDS STRUCTURE:\n"
        "Each keyword object must have:\n"
        "{\n"
        '  "category": "VISUAL ACTIONS|PEOPLE & ROLES|ENVIRONMENTS & PLACES|OBJECTS & PROPS|EMOTIONAL/CONTEXTUAL",\n'
        '  "base": "main keyword",\n'
        '  "synonyms": ["syn1", "syn2", "syn3"]\n'
        "}\n\n"
        "CATEGORIES:\n"
        "- VISUAL ACTIONS (8-12): running, exercising, meditating, writing\n"
        "- PEOPLE & ROLES (8-10): therapist, patient, family, professional\n"
        "- ENVIRONMENTS (8-10): hospital, clinic, gym, office, nature\n"
        "- OBJECTS (6-8): equipment, notebook, phone, weights\n"
        "- EMOTIONS (6-8): healing, stress relief, growth, recovery\n\n"
        "RULES:\n"
        "1. Output ONLY valid JSON\n"
        "2. No explanations or text outside JSON\n"
        "3. Use proper JSON syntax with double quotes\n"
        "4. Ensure all arrays have correct brackets\n"
        "5. Match transcript context (healthcare, therapy, EMDR)\n\n"
        "Transcript: EMDR movement sensation reprocessing lateralized movements people doing clinic got goofy looking thing while stress and rationale coupling a low stress state the recall of trauma it's gonna allow people reshape relationship trauma it's a tolerate that discomfort and EMDR clinical colleagues tell me works best fairly well defined traumas\n\n"
        "JSON:"
    )
    
    print(f"üìù Prompt: {len(prompt)} caract√®res")
    print(f"üéØ Mod√®le: llama2:13b")
    print(f"‚è≥ Test en cours...")
    
    try:
        # Appel direct √† l'API Ollama
        url = "http://localhost:11434/api/generate"
        payload = {
            "model": "llama2:13b",
            "prompt": prompt,
            "temperature": 0.7,
            "stream": False
        }
        
        print(f"üöÄ Envoi √† Ollama...")
        start_time = time.time()
        
        response = requests.post(url, json=payload, timeout=600)  # 10 minutes
        response.raise_for_status()
        
        end_time = time.time()
        response_time = end_time - start_time
        
        data = response.json()
        raw_response = data.get("response", "")
        
        print(f"‚úÖ R√©ponse re√ßue en {response_time:.1f}s")
        print(f"üìä Taille: {len(raw_response)} caract√®res")
        
        # Sauvegarder la r√©ponse brute
        with open("llama2_13b_json_brut.txt", "w", encoding="utf-8") as f:
            f.write(raw_response)
        
        print(f"\nüìÅ R√©ponse sauvegard√©e dans 'llama2_13b_json_brut.txt'")
        
        # Analyse de la r√©ponse
        print(f"\nüîç ANALYSE DE LA R√âPONSE:")
        print("=" * 50)
        
        # 1. Recherche de JSON
        json_start = raw_response.find("{")
        json_end = raw_response.rfind("}")
        
        if json_start != -1 and json_end != -1:
            print(f"‚úÖ JSON d√©tect√©: position {json_start} √† {json_end}")
            json_content = raw_response[json_start:json_end+1]
            
            # Sauvegarder le JSON extrait
            with open("llama2_13b_json_extrait.txt", "w", encoding="utf-8") as f:
                f.write(json_content)
            
            print(f"üìÅ JSON extrait sauvegard√© dans 'llama2_13b_json_extrait.txt'")
            
            # Test de validation JSON
            try:
                parsed_json = json.loads(json_content)
                print(f"‚úÖ JSON valide !")
                print(f"üìã Cl√©s trouv√©es: {list(parsed_json.keys())}")
                
                # Analyse d√©taill√©e des cl√©s
                print(f"\nüîç ANALYSE D√âTAILL√âE:")
                print("=" * 30)
                
                for key, value in parsed_json.items():
                    if isinstance(value, list):
                        print(f"   {key}: {len(value)} √©l√©ments")
                        if key == "hashtags" and len(value) < 10:
                            print(f"      ‚ö†Ô∏è INSUFFISANT: {len(value)} hashtags (attendu: 10-14)")
                        elif key == "broll_keywords" and len(value) < 20:
                            print(f"      ‚ö†Ô∏è INSUFFISANT: {len(value)} keywords (attendu: 20-25)")
                    else:
                        print(f"   {key}: {type(value).__name__} = '{value}'")
                
                # Affichage complet du JSON
                print(f"\nüìÑ JSON COMPLET G√âN√âR√â:")
                print("=" * 30)
                print(json.dumps(parsed_json, indent=2, ensure_ascii=False))
                
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON invalide: {e}")
                
        else:
            print(f"‚ùå Aucun JSON d√©tect√© dans la r√©ponse")
            print(f"üîç Contenu de la r√©ponse:")
            print(f"   D√©but: {raw_response[:200]}...")
            print(f"   Fin: ...{raw_response[-200:]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    capture_json_llama2_13b() 